
# $Id$
# from ESRF (http://www.esrf.eu/blissdb/macros/getsource.py?macname=attributes.mac)

#%TITLE% ATTRIBUTES.MAC
#%NAME% ATTRIBUTES.MAC - TANGO attribute macro counters.
#
#%DESCRIPTION%
#     The macro set offers the possibility to set-up a TANGO attribute
#     as macro motor or as macro counter.
#      Only read/write TANGO attributes can be used as macro motor.
#     The macro motor controller defined is called "attr_mot" and
#     The macro counter controller defined is called "attr_ct".
#
#%SETUP%
#Motor and Counter Device Configuration (Not CAMAC)
# ...
#SCALERS        DEVICE   ADDR  <>MODE  NUM                                 <>TYPE
#    YES                         POLL    1                         Software Timer
#    YES        attr_c      -            2                          Macro Counter
#
# take care to set the NUM field to the good number of macro_counters you need.
#
#%EXAMPLE%
#%DL%
#
#
#%DT%  attr_mot_setup tilt id14/eh3-motor/mono_tile/Position %DD%
#    Set-up the TANGO attribute macro motor with the mnemonic "tilt"
#
#%DT%  attr_ct_setup det id14/pindiode/eh3/Intensity %DD%
#    Set-up the TANGO attribute macro counter with the mnemonic "det"
#
#%XDL%
#
#%END%


# General parameters for attributes macros.
global ATTR_PAR[]
#ATTR_PAR["tango_aware"]
ATTR_PAR["mot_error"] = "ATTR : WARNING, error on reading attribute macro motor."
ATTR_PAR["ct_error"]  = "ATTR : WARNING, error on reading attribute macro counter."


# Macro-COUNTERS parameters.
global ATTR_CT
list_test ATTR_CT
# ATTR_CT[mne]["dev_name"]
# ATTR_CT[mne]["attr_name"]


# Macro-MOTORS parameters.
global ATTR_MOT
list_test ATTR_MOT
# ATTR_MOT[mne]["dev_name"]
# ATTR_MOT[mne]["attr_name"]

global ESRF_ERR


######################################################################
##############################           #############################
##############################  General  #############################
##############################           #############################
######################################################################

#%UU%
#%MDESC%
#    Removes everythings about attributes.mac
def attr_unsetup '{
    unglobal ATTR_MOT
    unglobal ATTR_CT
    unglobal ATTR_PAR

    # no cdef ?
}'


#%UU%
#%MDESC%
#    Displays information about counters managed by attributes macros.
def attr_show '{
    attr_ct_show
    print ""
    attr_mot_show
}'

######################################################################
##########################                  ##########################
##########################  Macro counters  ##########################
##########################                  ##########################
######################################################################

#%UU% <mne> <dev> <attribute>   |  <mne> <dev/attribute>
#%MDESC%
# Configures counter <mne> to read <attribute> of tango device <dev>.
#
# example:    attr_ct_setup  bpm2x  id22eh2/bpmccd/1   X
#          or attr_ct_setup  bpm2x  id22eh2/bpmccd/1/X
#
# example2: attr_ct_setup sstate sys/Database/2   State
#           attr_ct_setup toto   id22/refillsim/1/Refill_time
#
def attr_ct_setup '{
    global ATTR_PAR
    global ATTR_CT

    local _args_strings  _mne  _nbarg

    _nbarg = $#

    _mne = "$1"

    list_test ATTR_CT
    list_test ATTR_PAR

    list_add(ATTR_CT, _mne)

    # Checks if you spec version can use "tango_get".
    # ??? what happens in case of an old SPEC ???
    # test on VERSION ???
    if (tango_io("sys/Database/2", "State") != -1){
        ATTR_PAR["tango_aware"] = 1
    }
    else {
        ATTR_PAR["tango_aware"] = 0
    }

    # Parses arguments to extract device and attribute names.
    # 2 or 3 arguments ?
    if (_nbarg == 2){
        # print "2 parameters given."
        _args_strings[0] = 0
        split ("$2", _args_strings, "/")

        list_setpar(ATTR_CT, _mne, "dev_name",                     \
                 sprintf("%s/%s/%s", _args_strings[0],          \
                         _args_strings[1], _args_strings[2]))

        list_setpar(ATTR_CT, _mne, "attr_name", _args_strings[3])
    }
    else if (_nbarg == 3){
        # print "3 parameters given."
        list_setpar(ATTR_CT, _mne, "dev_name", "$2")
        list_setpar(ATTR_CT, _mne, "attr_name", "$3")
    }
    else {
        print "error : $0 requires 2 or 3 arguments."
        print "usage -> $0  <mne> <device> <attribute>"
        print "      or $0  <mne> <device/attribute>"
        exit
    }

    # Informative message.
    printf("Configuring counter ")
    tty_cntl("md")
    printf ("%s", "$1")
    tty_cntl("me")
    printf (" to reflect attribute ")
    tty_cntl("md")
    printf ("%s", ATTR_CT["$1"]["attr_name"])
    tty_cntl("me")
    printf (" of device ")
    tty_cntl("md")
    printf ("%s", ATTR_CT["$1"]["dev_name"])
    tty_cntl("me")
    print "."

    if (cnt_num(_mne) < 0){
        printf("Warning: counter \"%s\" is not defined\n", _mne)
    }

}'

#%UU% <mne>
#%MDESC%
#    Removes reading of attribute linked to <mne> counter.
#    ex: attr_ct_unsetup sstate
def attr_ct_unsetup '{
    local nb_param

    nb_param =$#

    if (nb_param < 1){
        print "usage : $0 <counter_mnemonic>"
    }
    else{
        list_remove(ATTR_CT, "$1")
    }
}'

#%UU%
#%MDESC%
#    Removes reading of all attributes.
def attr_ct_unsetup_all '{
    unglobal ATTR_CT
}'


#%UU%
#%MDESC%
#    Displays informations about macro counters.
def attr_ct_show '{
    local _mne

    print "-------=== macro counters ===------------"
    print "mnemonic         device       attribute  "
    print "-----------------------------------------"

    for (i=0; i< list_n(ATTR_CT); i++){
        _mne = ATTR_CT[i+1]
        print ATTR_CT[i+1]"      " ATTR_CT[_mne]["dev_name"]"     "\
            ATTR_CT[_mne]["attr_name"]
    }
    print "-----------------------------------------"

}'


#%IU%
#%MDESC%
#    Main function for macro counter.
def attr_ct_cmd(cntnum, what, p1, p2) '{
    global ATTR_CT
    local _cntr _dev _attr

    _cntr_mne = cnt_mne(cntnum)

    # print "_cntr_mne=" _cntr_mne " \t what=" what

    # "counts" read the attribute value as counter
    # parameters: none
    if (cntnum == ".."){
        # for key applying to all counters
        #print "--"
    }
    else{
        if (what == "counts") {
            # print "what == \"counts\""
            local _ans _num  _dev _attr

            # Tests if _cntr_mne is really an attr_ct macro counter.
            if (list_check(ATTR_CT, _cntr_mne)){
                _dev  = list_getpar(ATTR_CT, _cntr_mne, "dev_name")
                _attr = list_getpar(ATTR_CT, _cntr_mne, "attr_name")

                if(ATTR_PAR["tango_aware"]){

                    _ans = tango_get(_dev, _attr)

                    if (TANGO_ERR){
                        tty_cntl("md")
                        print "\n" ATTR_CT_ERROR " " _cntr_mne
                        printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
                        print TANGO_ERR_STACK
                        tty_cntl("me")
                        exit
                    }
                }
                else{
                    # print "esrf_io() VERSION"
                    # esrf_io version.
                    local _target
                    ESRF_ERR = -1

                    _target = _dev "/" _attr
                    _ans    = esrf_io (_target, "DevRead")

                    if (ESRF_ERR) {
                        tty_cntl("md")
                        print "\n" ATTR_CT_ERROR " " _cntr_mne " <- " _target "\n"
                        print "\n" ESRF_ERR_MSG "\n\n"
                        tty_cntl("me")
                    }
                }

                return (_ans)
            }
            else{
                #  print "Counter \"" _cntr_mne "\" not set up in ATTR_CT."
                return (-1)
            }
        }
    }
}'


# def ct '{
#    _cols = 0
#    p "1"
#    waitmove
#    p "2"
#    count_em $*
#    p "3"
#    rdef cleanup \'
#         undef cleanup
#         onp; show_cnts; offp
#         user_handlecounts
#    \'
#    p "4"
#    waitcount
#    p "5"
#    undef cleanup
#    p "6"
#    onp; show_cnts; offp
#    p "7"
#    user_handlecounts
#    p "8"
# }'
#
# 374.CYRIL> ct
# 1
# 2
# what == "counts"
# what == "counts"
# 3
# 4
# what == "counts"
# what == "counts"
# 5
# 6
# what == "counts"
# what == "counts"
# 
# Thu Jan 22 17:09:38 2009
# 
#      Seconds = 1.003
#      Monitor = 0 (0/s)
#     Detector = 0 (0/s)
#         toto = -1 (-0.997009/s)
#       sstate = 0 (0/s)
# 7
# 8
# 
# 375.CYRIL> what == "counts"
# what == "counts"
# 
# 
# 375.CYRIL>




######################################################################
###########################                ###########################
###########################  Macro motors  ###########################
###########################                ###########################
######################################################################

##%UU% <mne> <dev> <attribute>   |  <mne> <dev/attribute>
#%MDESC%
# Configures counter <mne> to read <attribute> of tango device <dev>.
#
# example:    attr_mot_setup  at1  id22eh2/machin/1   X
#          or attr_mot_setup  at2  id22eh2/machin/1/X
#
# example 2  attr_mot_setup rft1  id22/refillsim/1  Refill_time
#         or attr_mot_setup rft1  id22/refillsim/1/Refill_time
#
def attr_mot_setup '{
    local _fields  _dev_name   _nbarg
    local _args_strings  _mne

    # Checks if you spec version can use "tango_put/tango_get".
    # ??? what happens in case of an old SPEC ???
    # test on VERSION ???
    if (tango_io("sys/Database/2", "State") != -1){
        ATTR_PAR["tango_aware"] = 1
    }
    else {
        ATTR_PAR["tango_aware"] = 0
    }

    _mne = "$1"

    list_test ATTR_MOT
    list_test ATTR_PAR

    list_add(ATTR_MOT, _mne)

    _nbarg = $#


    # Parses arguments to extract device and attribute names.
    # 2 or 3 arguments ?
    if (_nbarg == 2){
        # print "2 parameters given."
        _args_strings[0] = 0
        split ("$2", _args_strings, "/")

        list_setpar(ATTR_MOT, _mne, "dev_name",                     \
                 sprintf("%s/%s/%s", _args_strings[0],          \
                         _args_strings[1], _args_strings[2]))

        list_setpar(ATTR_MOT, _mne, "attr_name", _args_strings[3])
    }
    else if (_nbarg == 3){
        # print "3 parameters given."
        list_setpar(ATTR_MOT, _mne, "dev_name", "$2")
        list_setpar(ATTR_MOT, _mne, "attr_name", "$3")
    }
    else {
        print "error : $0 requires 2 or 3 arguments."
        print "usage -> $0  <mne> <device> <attribute>"
        print "      or $0  <mne> <device/attribute>"
        exit
    }


    # Informative message.
    printf("Configuring macro motor ")
    tty_cntl("md")
    printf ("%s", "$1")
    tty_cntl("me")
    printf (" to reflect attribute ")
    tty_cntl("md")
    printf ("%s", ATTR_MOT["$1"]["attr_name"])
    tty_cntl("me")
    printf (" of device ")
    tty_cntl("md")
    printf ("%s", ATTR_MOT["$1"]["dev_name"])
    tty_cntl("me")
    print "."

    if (motor_num(_mne) < 0){
        printf("Warning: motor \"%s\" is not defined\n", _mne)
    }
}'



#%UU% <mne>
#%MDESC%
#    Removes reading of attribute linked to <mne> motor.
#    ex: attr_mot_unsetup at1
def attr_mot_unsetup '{
    local _nb_param

    _nb_param =$#

    if (_nb_param < 1){
        print "usage : $0 <motor_mnemonic>"
    }
    else{
        list_remove(ATTR_MOT, "$1")
    }
}'

#%UU%
#%MDESC%
#    Removes reading of all attributes.
def attr_mot_unsetup_all '{
    unglobal ATTR_MOT
}'

#%UU%
#%MDESC%
#    Displays informations about attributes macro motors.
def attr_mot_show '{
    local _mne

    print "--------==== macro motors ====-----------"
    print "mnemonic         device       attribute  "
    print "-----------------------------------------"

    for (i=0; i< list_n(ATTR_MOT); i++){
        _mne = ATTR_MOT[i+1]
        print ATTR_MOT[i+1]"      " ATTR_MOT[_mne]["dev_name"]"     "   \
            ATTR_MOT[_mne]["attr_name"]
    }
    print "-----------------------------------------"

}'


#%IU%
#%MDESC%
#
def attr_mot_cmd(motnum, what, p1, p2) '{

    local _mot_mne  _dev  _attr

    _mot_mne = motor_mne(motnum)

    # Tests if _mot_mne is really an attr_ macro motor.
    if (list_check(ATTR_MOT, _mot_mne)){
        _dev    = list_getpar(ATTR_MOT, _mot_mne, "dev_name")
        _attr   = list_getpar(ATTR_MOT, _mot_mne, "attr_name")
        _target = _dev "/" _attr
    }
    else{
        #  print "Motor \"" _mot_mne "\" not set up in ATTR_MOT."
        return (-1)
    }



    if(motnum == ".."){
        # key applying to all motors
        # print "--"
    }

    #-------------------------------------
    # "position" must return dial position (in integer steps)
    # parameters: none
    if (what == "position") {
        local _pos

        if(ATTR_PAR["tango_aware"]){
            _pos = tango_get(_dev, _attr)

            if (TANGO_ERR){
                tty_cntl("md")
                print "\n" ATTR_MOT_ERROR " " _mot_mne  " " _dev  "/"  _attr
                printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
                print TANGO_ERR_STACK
                tty_cntl("me")
                exit
            }
        }
        else{
            _pos = esrf_io (_target, "DevRead")

            if (ESRF_ERR) {
                tty_cntl("md")
                print "\n" ATTR_MOT_ERROR " " _mot_mne " <- " _target "\n"
                print "\n" ESRF_ERR_MSG "\n\n"
                tty_cntl("me")
            }
        }
        return (_pos)
    }

    #-------------------------------------
    # "get_status" called during the motion, must return a bit mask
    # bits meaning: 0 if motor idle
    #               2 if motor moving
    #               4 if negative limit on
    #               8 if positive limit on
    # parameters:   none
    if (what == "get_status"){
        local _state
        local _ret

        if(ATTR_PAR["tango_aware"]){
            _state = tango_io(_dev, "State")

            if (TANGO_ERR){
                tty_cntl("md")
                print "\n" ATTR_MOT_ERROR " " _mot_mne  " " _dev  "/"  _attr
                printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
                print TANGO_ERR_STACK
                tty_cntl("me")
                exit
            }
        }
        else{
            ESRF_ERR = -1
            _state = esrf_io (_target, "DevState")

            if (ESRF_ERR){
                tty_cntl("md")
                print "\n" MOT_ERROR " " _mot_mne "\n"
                print "\n" ESRF_ERR_MSG"\n\n"
                tty_cntl("me")
            }
        }

        #
        # DEVMOVING
        #
        if (_state == 9) {
            _ret |= 2
            return _ret
        }
        #
        # DEVFAULT
        #
        if (_state == 23) {
            local _status

            print ""

            if(ATTR_PAR["tango_aware"]){
                _status = tango_io(_dev, "DevStatus")
            }
            else{
                ESRF_ERR = -1
                print esrf_io (_target, "DevStatus")
            }

            print "Status= " _status

            print ""
            return 0
        }

        return 0
    }

    #-------------------------------------
    # "start_one"
    # parameters: p2 is relative motion, p1 is absolute requested position
    if (what == "start_one") {
        if(ATTR_PAR["tango_aware"]){

            tango_put(_dev, _attr, p1)

            if (TANGO_ERR){
                tty_cntl("md")
                print "\n" ATTR_MOT_ERROR " " _mot_mne  " " _dev  "/"  _attr
                printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
                print TANGO_ERR_STACK
                tty_cntl("me")
                exit
            }
        }
        else{
            ESRF_ERR = -1

            esrf_io (_target, "DevWrite", p1)
            if (ESRF_ERR) {
                tty_cntl("md")
                print "\n" MOT_ERROR " " _mot_mne "\n"
                print "\n" ESRF_ERR_MSG"\n\n"
                tty_cntl("me")
            }
        }
    }

    #-------------------------------------
    # "set_position" called on "set_dial motor newpos"
    # parameters: p1 is the new position (in steps)
    #
    if (what == "set_position") {
        if(ATTR_PAR["tango_aware"]){
            tango_put(_dev, _attr, p1)

            if (TANGO_ERR){
                tty_cntl("md")
                print "\n" ATTR_MOT_ERROR " " _mot_mne  " " _dev  "/"  _attr
                printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
                print TANGO_ERR_STACK
                tty_cntl("me")
                exit
            }
        }
        else{
            ESRF_ERR = -1

            esrf_io (_target, "DevWrite", p1)

            if (ESRF_ERR) {
                tty_cntl("md")
                print "\n" MOT_ERROR " " _mot_mne "\n"
                print "\n" ESRF_ERR_MSG"\n\n"
                tty_cntl("me")
            }
        }
    }

    #-------------------------------------
    # "abort_one" called on <Ctrl-C>
    #
    if (what == "abort_one") {
        if(ATTR_PAR["tango_aware"]){
            tango_put(_dev, "DevAbort")

            if (TANGO_ERR){
                tty_cntl("md")
                print "\n" ATTR_MOT_ERROR " " _mot_mne  " " _dev  "/"  _attr
                printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
                print TANGO_ERR_STACK
                tty_cntl("me")
                exit
            }
        }
        else{
            ESRF_ERR = -1
            esrf_io (_target, "DevAbort")
            if (ESRF_ERR) {
                tty_cntl("md")
                print "\n" MOT_ERROR " " _mot_mne "\n"
                print "\n" ESRF_ERR_MSG"\n\n"
                tty_cntl("me")
            }
        }
    }
}'


#%MACROS%
#%IMACROS%
#%AUTHOR%

