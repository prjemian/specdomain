
# $Id$
# from Christian Schlepuetz (formatted for RoboDoc)

#==============================================================================
#%+H* common/shutter
#     ==============
#
# NAME
#   shutter.mac
#
# SUMMARY
#   Commands to control a fast photon shutter.
#
# DESCRIPTION
#   The macro causes the fast photon shutter to be opened immediately prior to
#   any count command, and closed again upon its completion. A configurable
#   delay time assures that the shutter is fully open before issuing the
#   count command.
#   The photon shutter is controlled via an EPICS binary output channel, and
#   the shutter status is optionally monitored via a binary input channel (in
#   which case the delay time is not used, but the monitor signal is used to
#   check for completion of the opening process).
#
# AUTHOR
#   Christian M. Schlepuetz (CS, cschlep)
#
# CREATION DATE
#   2004/11/06
#
# COPYRIGHT
#   Copyright 2006-2011 by the above authors (see AUTHOR/AUTHORS)
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see http://www.gnu.org/licenses/.
#
# VERSION
#   $Date: 2010-11-04 19:06:06 -0400 (Thu, 04 Nov 2010) $
#   $Author: cschlep $
#   $URL: file:///data/svn/software/spec/trunk/common/shutter.mac $
#   $Revision: 17 $
#
# DEPENDENCIES
#   Chained macro definitions affected by this macro:
#   - user_precount
#   - user_getcounts
#   - cleanup_always
#
# HISTORY
#   2004/11/06 (CS):
#   - modified the first original version to comply with naming and format
#     conventions
#   - implemented help-file support and wrote help texts.
#
#   2010/03/30 (CS):
#   - added the following global variables to make macro more easily portable:
#
#     SHUTTER_CONTROL_PV      # EPICS PV name for the shutter control (bo)
#     SHUTTER_CONTROL_OPEN    # EPICS control value for open shutter
#     SHUTTER_CONTROL_CLOSED  # EPICS control value for closed shutter
#     SHUTTER_STATUS_PV       # EPICE PV name for the shutter status (bi)
#     SHUTTER_STATUS_OPEN     # EPICS status value for open shutter
#     SHUTTER_STATUS_CLOSED   # EPICS status value for closed shutter
#     SHUTTER_IS_ON           # flag for automatic shutter control
#     SHUTTER_SLEEP_TIME      # SPEC sleep time after opening shutter
#
#   2010/07/23 (CS):
#   - added SVN keywords (replacing CVS keywords)
#
#   2011/12/19 (CS):
#   - reformatted code documentation to work with ROBODoc
#   - added shutter_setup with following internal macros:
#     * _shutter_print_setup
#     * _shutter_set_option
#     * _clear_screen
#   - replaced SHUTTER_STATUS* with SHUTTER_MONITOR*
#   - replaced global variables _OPEN with _OPEN_VAL and
#     _CLOSED with _CLOSED_VAL
#
#%-
#==============================================================================

#==============================================================================
# Define some global variables
# ----------------------------

    global SHUTTER_MAC
           SHUTTER_MAC = DOFILE

    # EPICS PV of the binary output which controls the shutter
    #
    global SHUTTER_CONTROL_PV
           SHUTTER_CONTROL_PV = "X04SA-ES3-SC:FPS"

    global SHUTTER_CONTROL_OPEN_VAL
           SHUTTER_CONTROL_OPEN_VAL = "On"

    global SHUTTER_CONTROL_CLOSED_VAL
           SHUTTER_CONTROL_CLOSED_VAL = "Off"

    # EPICS PV of the binary input which monitors the state of the shutter
    # if SHUTTER_MONITOR_PV = "", no monitoring is performed
    #
    global SHUTTER_MONITOR_PV
           SHUTTER_MONITOR_PV = ""

    global SHUTTER_MONITOR_OPEN_VAL
           SHUTTER_MONITOR_OPEN_VAL = "open"

    global SHUTTER_MONITOR_CLOSED_VAL
           SHUTTER_MONITOR_CLOSED_VAL = "closed"

    global SHUTTER_IS_ON
           SHUTTER_IS_ON = 0

    global SHUTTER_SLEEP_TIME
           SHUTTER_SLEEP_TIME = 0.1


#==============================================================================
# This macro file contains the following commands:
#==============================================================================

#------------------------------------------------------------------------------
#%+M* shutter/sh_help, shutter_help
#     ===============
#
# SUMMARY
#   Displays the shutter help text.
#
# USAGE
#   > sh_help
#
# NOTE
#   The help text is generated by simply displaying the text file
#   shutter_mac.txt, which should reside in the same directory as shutter.mac.
#   If the file does not exist, a generic help text is shown.
#%-

def shutter_help 'sh_help'

def sh_help '{
#   =======

  unix (sprintf ("dirname %s", SHUTTER_MAC), _1)
  ll = length (_1)
  if (substr (_1, ll, 1) == "\n") _1 = substr (_1, 1, (ll - 1))
  file = sprintf ("%s/shutter_mac.txt", _1)
  if (file_info (file, "-e")) {
    unix (sprintf ("cat %s", file))
  } else {
    printf("\n  Macros available in file shutter.mac:\n")
    printf(  "                           ===========\n")
    printf("\n")
    printf("  sh_help      - creates this help text\n")
    printf("  shop         - opens the fast shutter\n")
    printf("  shcl         - closes the fast shutter\n")
    printf("  shon         - activate automatic shutter opening and closing\n")
    printf("  shoff        - turn automatic shutter opening and closing off\n")
    printf("  sh_status    - display whether the shutter is open or closed\n")
    printf("  sh_show      - display shutter configuration and status\n")
    printf("  sh_setup     - modify the shutter configuration\n")
    printf("\n")
  }
}'


#------------------------------------------------------------------------------
#%+M* shutter/shop, shutter_open
#     ============
#
# USAGE
#   > shop
#
# SUMMARY
#   Open the fast photon shutter
#%-

def shutter_open 'shop'

def shop'{
#   ====

    epics_put (SHUTTER_CONTROL_PV, SHUTTER_CONTROL_OPEN_VAL)
    if (SHUTTER_MONITOR_PV == ""){
        sleep(SHUTTER_SLEEP_TIME)
    } else {
        while(epics_get(SHUTTER_MONITOR_PV) != SHUTTER_MONITOR_OPEN_VAL){
            sleep(0.01)
        }
    }
}'


#------------------------------------------------------------------------------
#%+M* shutter/shcl, shutter_close
#     ============
#
# USAGE
#   > shcl
#
# SUMMARY
#   Close the fast photon shutter
#%-

def shutter_close 'shcl'

def shcl'{
#   ====

    epics_put (SHUTTER_CONTROL_PV, SHUTTER_CONTROL_CLOSED_VAL)
    if (SHUTTER_MONITOR_PV != ""){
        while(epics_get(SHUTTER_MONITOR_PV) != SHUTTER_MONITOR_CLOSED_VAL){
            sleep(0.01)
        }
    }
}'


#------------------------------------------------------------------------------
#%+M* shutter/shon, shutter_on
#     ============
#
# SUMMARY
#   Activate automatic shutter opening and closing.
#
# DESCRIPTION
#   If automatic shutter control is enabled, the shutter is opened just before
#   an actual count command is executed and immediately closed again thereafter
#   to prevent unnecessary sample and detector irradiation.
#
# USAGE
#   > shon [<flag>]
#
#   When called with no <flag> argument, shon enables automatic shutter
#   control. <flag> can be one of the following
#     flag = 1 --> enable automatic shutter control (default)
#     flag = 0 --> disable automatic shutter control
#
# NOTES
#   When automatic shutter control is enabled, the fast photon shutter is
#   always closed in a case of any error (this includes also Ctrl-C
#   interrupts).
#%-

def shutter_on 'shon'

def shon '{
#   ====

  if($# == 0){
    _status = 1
  } else if($# == 1){
    _status = $1
  } else {
    printf("Error: wrong number of arguments in \'shon\'. Exiting...\n")
    printf("Usage:\n")
    printf("  shon <flag>\n")
    printf("flag = 1 --> enable\n")
    printf("flag = 0 --> disable\n")
    exit
  }

  if(_status){

    SHUTTER_IS_ON = 1

    # add to user_precount (opening) and user_getcounts (closing)
    cdef("user_precount","shop; ","aaa_shutter_user_precount_key",0x10)
    cdef("user_getcounts","shcl; ","zzz_shutter_user_getcounts_key",0x20)

    # add shcl to cleanup_always to close in case of errors
    cdef("cleanup_always","shcl; ","aaa_shutter_cleanup_key",0x10)
    printf("Automatic shutter opening is ON\n")
  } else {

    SHUTTER_IS_ON = 0

    # remove from user_precount and getcounts
    cdef("user_precount","","aaa_shutter_user_precount_key","delete")
    cdef("user_getcounts","","zzz_shutter_user_getcounts_key","delete")
    cdef("cleanup_always","","aaa_shutter_cleanup_key","delete")
    printf("Automatic shutter opening is OFF\n")
  }

}'


#------------------------------------------------------------------------------
#%+M* shutter/shoff, shutter_off
#     =============
#
# USAGE
#   > shoff
#
# SUMMARY
#   Turn automatic shutter opening and closing OFF.
#%-

def shutter_off 'shoff'

def shoff '{
#   ======

  shon 0

}'


#------------------------------------------------------------------------------
#%+M* shutter/sh_show, shutter_show
#     ===============
#
# USAGE
#   > sh_show
#
# SUMMARY
#   Display the fast photon shutter setup and status
#
# OUTPUT
#   This is a sample output:
#
#   Shutter setup:
#
#   1) Shutter control PV name                     : X04SA-ES3-SC:FPS
#   2) Control PV value for shutter OPEN           : On
#   3) Control PV value for shutter CLOSED         : Off
#   4) Shutter monitor PV name ("" if none)        :
#   5) Monitor PV value for shutter OPEN           : open
#   6) Monitor PV value for shutter CLOSED         : closed
#   7) Shutter delay time                          : 0.10 sec
#   8) Auto shutter enable(1) / disable(0)         : 0
#
#   Shutter is OPEN
#   Automatic shutter opening is ON
#%-

def shutter_show 'sh_show'

def sh_show'{
#   =======

  _shutter_print_setup
  sh_status

}'


#------------------------------------------------------------------------------
#%+M* shutter/sh_status, shutter_status
#     =================
#
# USAGE
#   > sh_status
#
# SUMMARY
#   Display the fast photon shutter status (OPEN or CLOSED)
#
# OUTPUT
#   This is a sample output:
#
#   Shutter is OPEN
#   Automatic shutter opening is ON
#%-

def shutter_status 'sh_status'

def sh_status'{
#   =========

    if (SHUTTER_MONITOR_PV != ""){
        if (epics_get(SHUTTER_MONITOR_PV)==SHUTTER_MONITOR_OPEN_VAL){
          printf("Shutter is OPEN\n")
        } else {
          printf("Shutter is CLOSED\n")
        }
    } else {
        if (epics_get(SHUTTER_CONTROL_PV)==SHUTTER_CONTROL_OPEN_VAL){
          printf("Shutter is OPEN\n")
        } else {
          printf("Shutter is CLOSED\n")
        }
    }

    if (SHUTTER_IS_ON == 1){
      printf("Automatic shutter opening is ON\n")
    } else {
      printf("Automatic shutter opening is OFF\n")
    }

}'


#------------------------------------------------------------------------------
#%+M* shutter/sh_setup, shutter_setup
#     ================
#
# USAGE
#   > sh_setup
#
#   Then modify the dialog options
#
# SUMMARY
#   Modify the shutter configuration.
#%-

def shutter_setup 'sh_setup'

def sh_setup '{
#   ========

    local _setup_numitems, _setup_option, _tmp_option, _str1

    # total number of setup items
    _setup_numitems = 8

    _clear_screen

    _setup_option = 0
    _tmp_option = -1
    while (_tmp_option) {
        _tmp_option = -1
        while (_tmp_option < 0 || _tmp_option > _setup_numitems){
            _shutter_print_setup
            _str1 = sprintf("Enter 1-%d to change the parameters, 0 to quit",\
              _setup_numitems)
            _tmp_option = getval(_str1, _setup_option)
            if(index(_tmp_option, "q") == 1 || index(_tmp_option, "Q") == 1){
              _tmp_option = 0
            }
        }
        _setup_option = _tmp_option
        if (_setup_option != 0){
            _shutter_set_option _setup_option
        }
        _setup_option = (_tmp_option + 1)%(_setup_numitems + 1)
    }
}'


#==============================================================================
# Internal macros
#==============================================================================

#------------------------------------------------------------------------------
#%+iM* shutter/_shutter_print_setup
#      ============================
#
# SUMMARY
#   Prints the configuration options and current values to screen
#
# NOTE
#   The option numbers must be kept in sync between _shutter_set_option and
#   _shutter_print_setup
#%-

def _shutter_print_setup '{
#   ====================

    tty_cntl("ho")  # home cursor on left upper corner of screen
    tty_cntl("cd")  # clear the rest of the screen

    tty_cntl("so")  # highlight font
    printf("Shutter setup:\n")
    tty_cntl("se")  # turn off font highlighting

    printf("\n 1) Shutter control PV name              \t: %s", \
      SHUTTER_CONTROL_PV)
    printf("\n 2) Control PV value for shutter OPEN    \t: %s", \
      SHUTTER_CONTROL_OPEN_VAL)
    printf("\n 3) Control PV value for shutter CLOSED  \t: %s", \
      SHUTTER_CONTROL_CLOSED_VAL)
    printf("\n 4) Shutter monitor PV name (\"\" if none) \t: %s", \
      SHUTTER_MONITOR_PV)
    printf("\n 5) Monitor PV value for shutter OPEN    \t: %s", \
      SHUTTER_MONITOR_OPEN_VAL)
    printf("\n 6) Monitor PV value for shutter CLOSED  \t: %s", \
      SHUTTER_MONITOR_CLOSED_VAL)
    printf("\n 7) Shutter delay time                   \t: %.2f sec", \
      SHUTTER_SLEEP_TIME)
    printf("\n 8) Auto shutter enable(1) / disable(0)  \t: %d", \
      SHUTTER_IS_ON)
    printf("\n\n")
}'

#------------------------------------------------------------------------------
#%+iM* shutter/_shutter_set_option
#      ===========================
#
# SUMMARY
#   Sets a new value for a given option
#
# DESCRIPTION
#   Sets a new value for a given option from the options menu that was created
#   with the _shutter_print_setup command.
#
# NOTE
#   The option numbers must be kept in sync between _shutter_set_option and
#   _shutter_print_setup
#%-

def _shutter_set_option '{
#   ===================

    if ($1==1) {
        SHUTTER_CONTROL_PV = getsval("Enter shutter control PV name",\
            SHUTTER_CONTROL_PV)
    } else if ($1==2) {
        SHUTTER_CONTROL_OPEN_VAL = \
            getsval("Control PV value for shutter OPEN",\
            SHUTTER_CONTROL_OPEN_VAL)
    } else if ($1==3) {
        SHUTTER_CONTROL_CLOSED_VAL = \
            getsval("Control PV value for shutter CLOSED",\
            SHUTTER_CONTROL_CLOSED_VAL)
    } else if ($1==4) {
        _str = "Enter shutter monitor PV name"\
               "(leave blank if shutter is not actively monitored)"
        SHUTTER_MONITOR_PV = \
            getsval(_str, SHUTTER_MONITOR_PV)
    } else if ($1==5) {
        SHUTTER_MONITOR_OPEN_VAL = \
            getsval("Monitor PV value for shutter OPEN",\
            SHUTTER_MONITOR_OPEN_VAL)
    } else if ($1==6) {
        SHUTTER_MONITOR_CLOSED_VAL = \
            getsval("Monitor PV value for shutter CLOSED",\
            SHUTTER_MONITOR_CLOSED_VAL)
    } else if ($1==7) {
        SHUTTER_SLEEP_TIME = getsval("Enter shutter delay time [seconds]",\
            SHUTTER_SLEEP_TIME)
    } else if ($1==8) {
        _status = yesno("Enable the automatic shutter control?",\
            SHUTTER_IS_ON)
        shon _status
    }
}'

#------------------------------------------------------------------------------
#%+iM* shutter/_clear_screen
#      =====================
#
# SUMMARY
#   Clears the terminal screen
#
# DESCRIPTION
#   Clears the screen without losing the screen history or messing up the
#   scrolling capabilities (this has been a problem for certain terminals)
#   by blanking out the entire height of the screen and returning the cursor to
#   the top left corner.
#%-

def _clear_screen '{
#   =============

  # update the ROWS and COLS variables in case the terminal has been resized
  tty_cntl("resized?")

  # print as many newlines as there are ROWS in terminal
  cl_text = ""
  for (i=0;i<ROWS;i++){
    cl_text = cl_text "\n"
  }
  printf(cl_text)

  # move back to the top of the screen and clear to end of the screen
  tty_move(0,0)
  tty_cntl("cd")

}'

#==============================================================================
# End of $Id$
#==============================================================================
